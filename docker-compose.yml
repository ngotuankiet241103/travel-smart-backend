version: "3.9"

services:
  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    hostname: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - travel
  redis:
    image: 'redis:latest'
    container_name: redis
    hostname: redis
    ports:
      - '6379:6379'
#  mysql:
#    image: mysql:8.0.33
#    container_name: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: 1234
#      MYSQL_USER: admin
#      MYSQL_PASSWORD: adminpassword
#    ports:
#      - "3307:3306"
#    volumes:
#      - mysqlv8_data:/var/lib/mysql
#      - ./initDB.sql:/docker-entrypoint-initdb.d/initDB.sql
#    networks:
#
#      - travel

#  zipkin:
#    image: 'openzipkin/zipkin'
#    container_name: zipkin
#    hostname: zipkin
#    ports:
#      - '9411:9411'
#    networks:
#      - travel
#  api-gateway:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    image: api-gateway:0.0.1
#    container_name: api-gateway
#    ports:
#        - "8888:8888"
#    expose:
#        - "8888"
#
#    depends_on:
#        - zipkin
#        - mysql
#    networks:
#      - travel
#  identity-service:
#    build:
#      context: ./identity-service
#      dockerfile: Dockerfile
#    image: identity-service:0.0.1
#    container_name: identity-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/identity_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8080:8080"
#    expose:
#      - "8080"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#  profile-service:
#    build:
#      context: ./profile-service
#      dockerfile: Dockerfile
#    image: profile-service:0.0.1
#    container_name: profile-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/profile_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8081:8081"
#    expose:
#      - "8081"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#  blog-service:
#    build:
#      context: ./blog-service
#      dockerfile: Dockerfile
#    image: blog-service:0.0.1
#    container_name: blog-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/blog_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8082:8082"
#    expose:
#      - "8082"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#  notification-service:
#    build:
#      context: ./notification-service
#      dockerfile: Dockerfile
#    image: notification-service:0.0.1
#    container_name: notification-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/media_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8083:8083"
#    expose:
#      - "8083"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#  location-service:
#    build:
#      context: ./location-service
#      dockerfile: Dockerfile
#    image: location-service:0.0.1
#    container_name: location-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/location_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8084:8084"
#    expose:
#      - "8084"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#
#  trip-service:
#    build:
#      context: ./trip-service
#      dockerfile: Dockerfile
#    image: trip-service:0.0.1
#    container_name: trip-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/trip_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8085:8085"
#    expose:
#      - "8085"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#  review-service:
#    build:
#      context: ./review-service
#      dockerfile: Dockerfile
#    image: review-service:0.0.1
#    container_name: review-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/review_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8086:8086"
#    expose:
#      - "8086"
#    depends_on:
#      - mysql
#    networks:
#      - travel
#  media-service:
#    build:
#      context: ./media-service
#      dockerfile: Dockerfile
#    image: media-service:0.0.1
#    container_name: media-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/media_travel_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
#      DBMS_USERNAME: root
#      DBMS_PASSWORD: 1234
#    ports:
#      - "8088:8088"
#    expose:
#      - "8088"
#    depends_on:
#      - mysql
#    networks:
#      - travel


    ## Prometheus
#  prometheus:
#    image: prom/prometheus:v2.37.1
#    container_name: prometheus
#    restart: unless-stopped
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#
#
#  grafana:
#    image: grafana/grafana-oss:8.5.2
#    container_name: grafana
#    restart: unless-stopped
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=password
#  otelcol:
#    image: otel/opentelemetry-collector-contrib:0.87.0
#    container_name: collector
#    hostname: collector
#    depends_on:
#      tempo:
#        condition: service_healthy
#      prometheus:
#        condition: service_healthy
#    deploy:
#      resources:
#        limits:
#          memory: 125M
#    restart: unless-stopped
#    command: [ "--config=/etc/otelcol-config.yml","--feature-gates=pkg.translator.prometheus.NormalizeName" ]
#    volumes:
#      - ./docker/otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
#    ports:
#      - "5555:5555"     # OTLP over gRPC receiver
#      - "6666:6666"     # OTLP over HTTP receiver
#      - "9464:9464"     # Prometheus exporter
#
#    networks:
#      - yas-network
#  prometheus:
#    image: prom/prometheus:v2.42.0
#    hostname: prometheus
#    container_name: prometheus
#    command:
#        - --web.console.templates=/etc/prometheus/consoles
#        - --web.console.libraries=/etc/prometheus/console_libraries
#        - --web.enable-remote-write-receiver
#        - --storage.tsdb.retention.time=1h
#        - --config.file=/etc/prometheus/prometheus.yml
#        - --storage.tsdb.path=/prometheus
#        - --web.enable-lifecycle
#        - --web.route-prefix=/
#        - --enable-feature=exemplar-storage
#    volumes:
#        - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    ports:
#        - "9090:9090"
#    healthcheck:
#      interval: 5s
#      retries: 10
#      test: wget --no-verbose --tries=1 --spider http://localhost:9090/status || exit 1
#    networks:
#      - yas-network
#  grafana:
#    image: grafana/grafana:9.3.6
#    container_name: grafana
#    extra_hosts: [ 'host.docker.internal:host-gateway' ]
#    volumes:
#        - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
#        - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
#    environment:
#        - GF_AUTH_ANONYMOUS_ENABLED=true
#        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#        - GF_AUTH_DISABLE_LOGIN_FORM=true
#    ports:
#        - "3000:3000"
#    healthcheck:
#      interval: 5s
#      retries: 10
#      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
#
#    networks:
#        - yas-network
#  loki:
#    image: grafana/loki:latest
#    container_name: loki
#    ports:
#      - "3100:3100"
#    command: -config.file=/etc/loki/local-config.yaml
#
#    networks:
#        - yas-network
#  tempo:
#    image: grafana/tempo:1.5.0
#    container_name: tempo
#    command: [ "-config.file=/etc/tempo.yaml", "-search.enabled=true" ]
#    volumes:
#        - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
#        - ./tempo-data:/tmp/tempo
#    ports:
#        - "3200:3200"
#        # - "14268:14268"  # jaeger ingest
#        # - "9411:9411" # zipkin
#        - "4317:4317" # otlp grpc ingest
#        #  - "4318:4318" # otlp http ingest
#    healthcheck:
#      interval: 5s
#      retries: 10
#      test: wget --no-verbose --tries=1 --spider http://localhost:3200/status || exit 1

#    networks:
#        - yas-network
volumes:
  mysqlv8_data:
networks:
  travel:
  mysql_net:
